{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Plan B\\\\Desktop\\\\WorkSpace\\\\UpBase Ltd\\\\News-Dev-Test-July\\\\pages\\\\index.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\n\nconst App = () => {\n  const {\n    0: artistsInfo,\n    1: setArtistsInfo\n  } = useState([]);\n  useEffect(async () => {\n    let artistData = require('./mass-artists.json');\n\n    const promises = artistData.map(theArtist => {\n      return fetch(`[url]https://api.scryfall.com/cards/search?q=a:[/url]\"${theArtist}\"`).then(response => {\n        return response.json();\n      }).then(myJson => {\n        return myJson.data;\n      });\n    });\n    const results = await Promise.all(promises); // results is an array of arrays because that is what your data seemed to be\n    // you could use lodash flatten if you want to get a single array\n\n    setArtistsInfo(results);\n  }, []); // empty array so it only runs once\n  // you could have a second useState to add a loader if you want\n\n  return artistsInfo.map(infoArray => {\n    return infoArray.map(singleInfo => {\n      return __jsx(\"span\", {\n        key: singleInfo.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 14\n        }\n      }, singleInfo.name);\n    });\n  });\n};","map":{"version":3,"sources":["C:/Users/Plan B/Desktop/WorkSpace/UpBase Ltd/News-Dev-Test-July/pages/index.js"],"names":["React","useState","useEffect","App","artistsInfo","setArtistsInfo","artistData","require","promises","map","theArtist","fetch","then","response","json","myJson","data","results","Promise","all","infoArray","singleInfo","id","name"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAChB,QAAM;AAAA,OAACC,WAAD;AAAA,OAAcC;AAAd,MAAgCJ,QAAQ,CAAC,EAAD,CAA9C;AAEAC,EAAAA,SAAS,CAAC,YAAY;AACpB,QAAII,UAAU,GAAGC,OAAO,CAAC,qBAAD,CAAxB;;AAEA,UAAMC,QAAQ,GAAGF,UAAU,CAACG,GAAX,CAAeC,SAAS,IAAI;AAC3C,aAAOC,KAAK,CACT,yDAAwDD,SAAU,GADzD,CAAL,CAGJE,IAHI,CAGCC,QAAQ,IAAI;AAChB,eAAOA,QAAQ,CAACC,IAAT,EAAP;AACD,OALI,EAMJF,IANI,CAMCG,MAAM,IAAI;AACd,eAAOA,MAAM,CAACC,IAAd;AACD,OARI,CAAP;AASD,KAVgB,CAAjB;AAWA,UAAMC,OAAO,GAAG,MAAMC,OAAO,CAACC,GAAR,CAAYX,QAAZ,CAAtB,CAdoB,CAepB;AACA;;AAEAH,IAAAA,cAAc,CAACY,OAAD,CAAd;AACD,GAnBQ,EAmBN,EAnBM,CAAT,CAHgB,CAsBR;AAER;;AAEA,SAAOb,WAAW,CAACK,GAAZ,CAAgBW,SAAS,IAAI;AAClC,WAAOA,SAAS,CAACX,GAAV,CAAcY,UAAU,IAAI;AACjC,aAAO;AAAM,QAAA,GAAG,EAAEA,UAAU,CAACC,EAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA2BD,UAAU,CAACE,IAAtC,CAAP;AACD,KAFM,CAAP;AAGD,GAJM,CAAP;AAKD,CA/BD","sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst App = () => {\r\n  const [artistsInfo, setArtistsInfo] = useState([]);\r\n\r\n  useEffect(async () => {\r\n    let artistData = require('./mass-artists.json');\r\n\r\n    const promises = artistData.map(theArtist => {\r\n      return fetch(\r\n        `[url]https://api.scryfall.com/cards/search?q=a:[/url]\"${theArtist}\"`\r\n      )\r\n        .then(response => {\r\n          return response.json();\r\n        })\r\n        .then(myJson => {\r\n          return myJson.data;\r\n        });\r\n    });\r\n    const results = await Promise.all(promises);\r\n    // results is an array of arrays because that is what your data seemed to be\r\n    // you could use lodash flatten if you want to get a single array\r\n\r\n    setArtistsInfo(results);\r\n  }, []); // empty array so it only runs once\r\n\r\n  // you could have a second useState to add a loader if you want\r\n\r\n  return artistsInfo.map(infoArray => {\r\n    return infoArray.map(singleInfo => {\r\n      return <span key={singleInfo.id}>{singleInfo.name}</span>;\r\n    });\r\n  });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}