{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Plan B\\\\Desktop\\\\WorkSpace\\\\UpBase Ltd\\\\News-Dev-Test-July\\\\pages\\\\index.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\n\nvar App = function App() {\n  _s();\n\n  var _useState = useState([]),\n      artistsInfo = _useState[0],\n      setArtistsInfo = _useState[1];\n\n  useEffect( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var artistData, promises, results;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            artistData = require('./mass-artists.json');\n            promises = artistData.map(function (theArtist) {\n              return fetch(\"[url]https://api.scryfall.com/cards/search?q=a:[/url]\\\"\".concat(theArtist, \"\\\"\")).then(function (response) {\n                return response.json();\n              }).then(function (myJson) {\n                return myJson.data;\n              });\n            });\n            _context.next = 4;\n            return Promise.all(promises);\n\n          case 4:\n            results = _context.sent;\n            // results is an array of arrays because that is what your data seemed to be\n            // you could use lodash flatten if you want to get a single array\n            setArtistsInfo(results);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  })), []); // empty array so it only runs once\n  // you could have a second useState to add a loader if you want\n\n  return artistsInfo.map(function (infoArray) {\n    return infoArray.map(function (singleInfo) {\n      return __jsx(\"span\", {\n        key: singleInfo.id,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 14\n        }\n      }, singleInfo.name);\n    });\n  });\n};\n\n_s(App, \"0DgCNe09FAMPWED3GEfHLNSwJUs=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Plan B/Desktop/WorkSpace/UpBase Ltd/News-Dev-Test-July/pages/index.js"],"names":["React","useState","useEffect","App","artistsInfo","setArtistsInfo","artistData","require","promises","map","theArtist","fetch","then","response","json","myJson","data","Promise","all","results","infoArray","singleInfo","id","name"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;AAEA,IAAMC,GAAG,GAAG,SAANA,GAAM,GAAM;AAAA;;AAAA,kBACsBF,QAAQ,CAAC,EAAD,CAD9B;AAAA,MACTG,WADS;AAAA,MACIC,cADJ;;AAGhBH,EAAAA,SAAS,wEAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AACJI,YAAAA,UADI,GACSC,OAAO,CAAC,qBAAD,CADhB;AAGFC,YAAAA,QAHE,GAGSF,UAAU,CAACG,GAAX,CAAe,UAAAC,SAAS,EAAI;AAC3C,qBAAOC,KAAK,kEAC+CD,SAD/C,QAAL,CAGJE,IAHI,CAGC,UAAAC,QAAQ,EAAI;AAChB,uBAAOA,QAAQ,CAACC,IAAT,EAAP;AACD,eALI,EAMJF,IANI,CAMC,UAAAG,MAAM,EAAI;AACd,uBAAOA,MAAM,CAACC,IAAd;AACD,eARI,CAAP;AASD,aAVgB,CAHT;AAAA;AAAA,mBAccC,OAAO,CAACC,GAAR,CAAYV,QAAZ,CAdd;;AAAA;AAcFW,YAAAA,OAdE;AAeR;AACA;AAEAd,YAAAA,cAAc,CAACc,OAAD,CAAd;;AAlBQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD,IAmBN,EAnBM,CAAT,CAHgB,CAsBR;AAER;;AAEA,SAAOf,WAAW,CAACK,GAAZ,CAAgB,UAAAW,SAAS,EAAI;AAClC,WAAOA,SAAS,CAACX,GAAV,CAAc,UAAAY,UAAU,EAAI;AACjC,aAAO;AAAM,QAAA,GAAG,EAAEA,UAAU,CAACC,EAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA2BD,UAAU,CAACE,IAAtC,CAAP;AACD,KAFM,CAAP;AAGD,GAJM,CAAP;AAKD,CA/BD;;GAAMpB,G;;KAAAA,G","sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst App = () => {\r\n  const [artistsInfo, setArtistsInfo] = useState([]);\r\n\r\n  useEffect(async () => {\r\n    let artistData = require('./mass-artists.json');\r\n\r\n    const promises = artistData.map(theArtist => {\r\n      return fetch(\r\n        `[url]https://api.scryfall.com/cards/search?q=a:[/url]\"${theArtist}\"`\r\n      )\r\n        .then(response => {\r\n          return response.json();\r\n        })\r\n        .then(myJson => {\r\n          return myJson.data;\r\n        });\r\n    });\r\n    const results = await Promise.all(promises);\r\n    // results is an array of arrays because that is what your data seemed to be\r\n    // you could use lodash flatten if you want to get a single array\r\n\r\n    setArtistsInfo(results);\r\n  }, []); // empty array so it only runs once\r\n\r\n  // you could have a second useState to add a loader if you want\r\n\r\n  return artistsInfo.map(infoArray => {\r\n    return infoArray.map(singleInfo => {\r\n      return <span key={singleInfo.id}>{singleInfo.name}</span>;\r\n    });\r\n  });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}